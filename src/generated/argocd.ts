/**
 * Generated by orval v6.28.2 🍺
 * Do not edit manually.
 * Consolidate Services
 * Description of all APIs
 * OpenAPI spec version: version not set
 */
import type {
  AccountAccount,
  AccountAccountsList,
  AccountCanIResponse,
  AccountCreateTokenRequest,
  AccountCreateTokenResponse,
  AccountEmptyResponse,
  AccountUpdatePasswordRequest,
  AccountUpdatePasswordResponse,
  ApplicationApplicationManifestQueryWithFilesWrapper,
  ApplicationApplicationPatchRequest,
  ApplicationApplicationResourceResponse,
  ApplicationApplicationResponse,
  ApplicationApplicationRollbackRequest,
  ApplicationApplicationSyncRequest,
  ApplicationApplicationSyncWindowsResponse,
  ApplicationLinksResponse,
  ApplicationManagedResourcesResponse,
  ApplicationOperationTerminateResponse,
  ApplicationResourceActionsListResponse,
  ApplicationServiceCreateParams,
  ApplicationServiceDeleteParams,
  ApplicationServiceDeleteResourceParams,
  ApplicationServiceGetApplicationSyncWindowsParams,
  ApplicationServiceGetManifestsParams,
  ApplicationServiceGetParams,
  ApplicationServiceGetResourceParams,
  ApplicationServiceListLinksParams,
  ApplicationServiceListParams,
  ApplicationServiceListResourceActionsParams,
  ApplicationServiceListResourceEventsParams,
  ApplicationServiceListResourceLinksParams,
  ApplicationServiceManagedResourcesParams,
  ApplicationServicePatchResourceBodyBody,
  ApplicationServicePatchResourceParams,
  ApplicationServicePodLogs200,
  ApplicationServicePodLogs2200,
  ApplicationServicePodLogs2Params,
  ApplicationServicePodLogsParams,
  ApplicationServiceResourceTreeParams,
  ApplicationServiceRevisionChartDetailsParams,
  ApplicationServiceRevisionMetadataParams,
  ApplicationServiceRunResourceActionParams,
  ApplicationServiceTerminateOperationParams,
  ApplicationServiceUpdateParams,
  ApplicationServiceUpdateSpecParams,
  ApplicationServiceWatch200,
  ApplicationServiceWatchParams,
  ApplicationServiceWatchResourceTree200,
  ApplicationServiceWatchResourceTreeParams,
  ApplicationSetServiceCreateParams,
  ApplicationSetServiceDeleteParams,
  ApplicationSetServiceGetParams,
  ApplicationSetServiceListParams,
  ApplicationsetApplicationSetResponse,
  CertificateServiceCreateCertificateParams,
  CertificateServiceDeleteCertificateParams,
  CertificateServiceListCertificatesParams,
  ClusterClusterResponse,
  ClusterServiceCreateParams,
  ClusterServiceDeleteParams,
  ClusterServiceGetParams,
  ClusterServiceListParams,
  ClusterServiceUpdateParams,
  ClusterSettings,
  ClusterSettingsPluginsResponse,
  GPGKeyServiceCreateParams,
  GPGKeyServiceDeleteParams,
  GPGKeyServiceListParams,
  GpgkeyGnuPGPublicKeyCreateResponse,
  GpgkeyGnuPGPublicKeyResponse,
  NotificationServiceList,
  NotificationTemplateList,
  NotificationTriggerList,
  ProjectDetailedProjectsResponse,
  ProjectEmptyResponse,
  ProjectGlobalProjectsResponse,
  ProjectProjectCreateRequest,
  ProjectProjectTokenCreateRequest,
  ProjectProjectTokenResponse,
  ProjectProjectUpdateRequest,
  ProjectServiceDeleteTokenParams,
  ProjectServiceListParams,
  ProjectSyncWindowsResponse,
  RepoCredsServiceCreateRepositoryCredentialsParams,
  RepoCredsServiceListRepositoryCredentialsParams,
  RepocredsRepoCredsResponse,
  RepositoryHelmChartsResponse,
  RepositoryManifestResponse,
  RepositoryRefs,
  RepositoryRepoAppDetailsQuery,
  RepositoryRepoAppDetailsResponse,
  RepositoryRepoAppsResponse,
  RepositoryRepoResponse,
  RepositoryServiceCreateRepositoryParams,
  RepositoryServiceDeleteRepositoryParams,
  RepositoryServiceGetHelmChartsParams,
  RepositoryServiceGetParams,
  RepositoryServiceListAppsParams,
  RepositoryServiceListRefsParams,
  RepositoryServiceListRepositoriesParams,
  RepositoryServiceValidateAccessParams,
  SessionGetUserInfoResponse,
  SessionSessionCreateRequest,
  SessionSessionResponse,
  V1EventList,
  V1alpha1AppProject,
  V1alpha1AppProjectList,
  V1alpha1Application,
  V1alpha1ApplicationBody,
  V1alpha1ApplicationList,
  V1alpha1ApplicationSet,
  V1alpha1ApplicationSetList,
  V1alpha1ApplicationSpec,
  V1alpha1ApplicationTree,
  V1alpha1ChartDetails,
  V1alpha1Cluster,
  V1alpha1ClusterBody,
  V1alpha1ClusterList,
  V1alpha1GnuPGPublicKey,
  V1alpha1GnuPGPublicKeyList,
  V1alpha1RepoCreds,
  V1alpha1RepoCredsList,
  V1alpha1Repository,
  V1alpha1RepositoryCertificateList,
  V1alpha1RepositoryList,
  V1alpha1RevisionMetadata,
  VersionVersionMessage
} from './argocd.schemas.js'
import { httpClient } from '../lib/http-client.js';



  /**
 * @summary ListAccounts returns the list of accounts
 */
export const accountServiceListAccounts = (
    
 ) => {
      return httpClient<AccountAccountsList>(
      {url: `/api/v1/account`, method: 'GET'
    },
      );
    }
  
/**
 * @summary CanI checks if the current account has permission to perform an action
 */
export const accountServiceCanI = (
    resource: string,
    action: string,
    subresource: string,
 ) => {
      return httpClient<AccountCanIResponse>(
      {url: `/api/v1/account/can-i/${resource}/${action}/${subresource}`, method: 'GET'
    },
      );
    }
  
/**
 * @summary UpdatePassword updates an account's password to a new value
 */
export const accountServiceUpdatePassword = (
    accountUpdatePasswordRequest: AccountUpdatePasswordRequest,
 ) => {
      return httpClient<AccountUpdatePasswordResponse>(
      {url: `/api/v1/account/password`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: accountUpdatePasswordRequest
    },
      );
    }
  
/**
 * @summary GetAccount returns an account
 */
export const accountServiceGetAccount = (
    name: string,
 ) => {
      return httpClient<AccountAccount>(
      {url: `/api/v1/account/${name}`, method: 'GET'
    },
      );
    }
  
/**
 * @summary CreateToken creates a token
 */
export const accountServiceCreateToken = (
    name: string,
    accountCreateTokenRequest: AccountCreateTokenRequest,
 ) => {
      return httpClient<AccountCreateTokenResponse>(
      {url: `/api/v1/account/${name}/token`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: accountCreateTokenRequest
    },
      );
    }
  
/**
 * @summary DeleteToken deletes a token
 */
export const accountServiceDeleteToken = (
    name: string,
    id: string,
 ) => {
      return httpClient<AccountEmptyResponse>(
      {url: `/api/v1/account/${name}/token/${id}`, method: 'DELETE'
    },
      );
    }
  
/**
 * @summary List returns list of applications
 */
export const applicationServiceList = (
    params?: ApplicationServiceListParams,
 ) => {
      return httpClient<V1alpha1ApplicationList>(
      {url: `/api/v1/applications`, method: 'GET',
        params
    },
      );
    }
  
/**
 * @summary Create creates an application
 */
export const applicationServiceCreate = (
    v1alpha1ApplicationBody: V1alpha1ApplicationBody,
    params?: ApplicationServiceCreateParams,
 ) => {
      return httpClient<V1alpha1Application>(
      {url: `/api/v1/applications`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: v1alpha1ApplicationBody,
        params
    },
      );
    }
  
/**
 * @summary GetManifestsWithFiles returns application manifests using provided files to generate them
 */
export const applicationServiceGetManifestsWithFiles = (
    applicationApplicationManifestQueryWithFilesWrapper: ApplicationApplicationManifestQueryWithFilesWrapper,
 ) => {
      return httpClient<RepositoryManifestResponse>(
      {url: `/api/v1/applications/manifestsWithFiles`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: applicationApplicationManifestQueryWithFilesWrapper
    },
      );
    }
  
/**
 * @summary Update updates an application
 */
export const applicationServiceUpdate = (
    v1alpha1ApplicationBody: V1alpha1ApplicationBody,
    params?: ApplicationServiceUpdateParams,
 ) => {
      return httpClient<V1alpha1Application>(
      {url: `/api/v1/applications/application.metadata.name}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: v1alpha1ApplicationBody,
        params
    },
      );
    }
  
/**
 * @summary ManagedResources returns list of managed resources
 */
export const applicationServiceManagedResources = (
    applicationName: string,
    params?: ApplicationServiceManagedResourcesParams,
 ) => {
      return httpClient<ApplicationManagedResourcesResponse>(
      {url: `/api/v1/applications/${applicationName}/managed-resources`, method: 'GET',
        params
    },
      );
    }
  
/**
 * @summary ResourceTree returns resource tree
 */
export const applicationServiceResourceTree = (
    applicationName: string,
    params?: ApplicationServiceResourceTreeParams,
 ) => {
      return httpClient<V1alpha1ApplicationTree>(
      {url: `/api/v1/applications/${applicationName}/resource-tree`, method: 'GET',
        params
    },
      );
    }
  
/**
 * @summary Get returns an application by name
 */
export const applicationServiceGet = (
    name: string,
    params?: ApplicationServiceGetParams,
 ) => {
      return httpClient<V1alpha1Application>(
      {url: `/api/v1/applications/${name}`, method: 'GET',
        params
    },
      );
    }
  
/**
 * @summary Delete deletes an application
 */
export const applicationServiceDelete = (
    name: string,
    params?: ApplicationServiceDeleteParams,
 ) => {
      return httpClient<ApplicationApplicationResponse>(
      {url: `/api/v1/applications/${name}`, method: 'DELETE',
        params
    },
      );
    }
  
/**
 * @summary Patch patch an application
 */
export const applicationServicePatch = (
    name: string,
    applicationApplicationPatchRequest: ApplicationApplicationPatchRequest,
 ) => {
      return httpClient<V1alpha1Application>(
      {url: `/api/v1/applications/${name}`, method: 'PATCH',
      headers: {'Content-Type': 'application/json', },
      data: applicationApplicationPatchRequest
    },
      );
    }
  
/**
 * @summary ListResourceEvents returns a list of event resources
 */
export const applicationServiceListResourceEvents = (
    name: string,
    params?: ApplicationServiceListResourceEventsParams,
 ) => {
      return httpClient<V1EventList>(
      {url: `/api/v1/applications/${name}/events`, method: 'GET',
        params
    },
      );
    }
  
/**
 * @summary ListLinks returns the list of all application deep links
 */
export const applicationServiceListLinks = (
    name: string,
    params?: ApplicationServiceListLinksParams,
 ) => {
      return httpClient<ApplicationLinksResponse>(
      {url: `/api/v1/applications/${name}/links`, method: 'GET',
        params
    },
      );
    }
  
/**
 * @summary PodLogs returns stream of log entries for the specified pod. Pod
 */
export const applicationServicePodLogs2 = (
    name: string,
    params?: ApplicationServicePodLogs2Params,
 ) => {
      return httpClient<ApplicationServicePodLogs2200>(
      {url: `/api/v1/applications/${name}/logs`, method: 'GET',
        params
    },
      );
    }
  
/**
 * @summary GetManifests returns application manifests
 */
export const applicationServiceGetManifests = (
    name: string,
    params?: ApplicationServiceGetManifestsParams,
 ) => {
      return httpClient<RepositoryManifestResponse>(
      {url: `/api/v1/applications/${name}/manifests`, method: 'GET',
        params
    },
      );
    }
  
/**
 * @summary TerminateOperation terminates the currently running operation
 */
export const applicationServiceTerminateOperation = (
    name: string,
    params?: ApplicationServiceTerminateOperationParams,
 ) => {
      return httpClient<ApplicationOperationTerminateResponse>(
      {url: `/api/v1/applications/${name}/operation`, method: 'DELETE',
        params
    },
      );
    }
  
/**
 * @summary PodLogs returns stream of log entries for the specified pod. Pod
 */
export const applicationServicePodLogs = (
    name: string,
    podName: string,
    params?: ApplicationServicePodLogsParams,
 ) => {
      return httpClient<ApplicationServicePodLogs200>(
      {url: `/api/v1/applications/${name}/pods/${podName}/logs`, method: 'GET',
        params
    },
      );
    }
  
/**
 * @summary GetResource returns single application resource
 */
export const applicationServiceGetResource = (
    name: string,
    params?: ApplicationServiceGetResourceParams,
 ) => {
      return httpClient<ApplicationApplicationResourceResponse>(
      {url: `/api/v1/applications/${name}/resource`, method: 'GET',
        params
    },
      );
    }
  
/**
 * @summary PatchResource patch single application resource
 */
export const applicationServicePatchResource = (
    name: string,
    applicationServicePatchResourceBodyBody: ApplicationServicePatchResourceBodyBody,
    params?: ApplicationServicePatchResourceParams,
 ) => {
      return httpClient<ApplicationApplicationResourceResponse>(
      {url: `/api/v1/applications/${name}/resource`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: applicationServicePatchResourceBodyBody,
        params
    },
      );
    }
  
/**
 * @summary DeleteResource deletes a single application resource
 */
export const applicationServiceDeleteResource = (
    name: string,
    params?: ApplicationServiceDeleteResourceParams,
 ) => {
      return httpClient<ApplicationApplicationResponse>(
      {url: `/api/v1/applications/${name}/resource`, method: 'DELETE',
        params
    },
      );
    }
  
/**
 * @summary ListResourceActions returns list of resource actions
 */
export const applicationServiceListResourceActions = (
    name: string,
    params?: ApplicationServiceListResourceActionsParams,
 ) => {
      return httpClient<ApplicationResourceActionsListResponse>(
      {url: `/api/v1/applications/${name}/resource/actions`, method: 'GET',
        params
    },
      );
    }
  
/**
 * @summary RunResourceAction run resource action
 */
export const applicationServiceRunResourceAction = (
    name: string,
    applicationServicePatchResourceBodyBody: ApplicationServicePatchResourceBodyBody,
    params?: ApplicationServiceRunResourceActionParams,
 ) => {
      return httpClient<ApplicationApplicationResponse>(
      {url: `/api/v1/applications/${name}/resource/actions`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: applicationServicePatchResourceBodyBody,
        params
    },
      );
    }
  
/**
 * @summary ListResourceLinks returns the list of all resource deep links
 */
export const applicationServiceListResourceLinks = (
    name: string,
    params?: ApplicationServiceListResourceLinksParams,
 ) => {
      return httpClient<ApplicationLinksResponse>(
      {url: `/api/v1/applications/${name}/resource/links`, method: 'GET',
        params
    },
      );
    }
  
/**
 * @summary Get the chart metadata (description, maintainers, home) for a specific revision of the application
 */
export const applicationServiceRevisionChartDetails = (
    name: string,
    revision: string,
    params?: ApplicationServiceRevisionChartDetailsParams,
 ) => {
      return httpClient<V1alpha1ChartDetails>(
      {url: `/api/v1/applications/${name}/revisions/${revision}/chartdetails`, method: 'GET',
        params
    },
      );
    }
  
/**
 * @summary Get the meta-data (author, date, tags, message) for a specific revision of the application
 */
export const applicationServiceRevisionMetadata = (
    name: string,
    revision: string,
    params?: ApplicationServiceRevisionMetadataParams,
 ) => {
      return httpClient<V1alpha1RevisionMetadata>(
      {url: `/api/v1/applications/${name}/revisions/${revision}/metadata`, method: 'GET',
        params
    },
      );
    }
  
/**
 * @summary Rollback syncs an application to its target state
 */
export const applicationServiceRollback = (
    name: string,
    applicationApplicationRollbackRequest: ApplicationApplicationRollbackRequest,
 ) => {
      return httpClient<V1alpha1Application>(
      {url: `/api/v1/applications/${name}/rollback`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: applicationApplicationRollbackRequest
    },
      );
    }
  
/**
 * @summary UpdateSpec updates an application spec
 */
export const applicationServiceUpdateSpec = (
    name: string,
    v1alpha1ApplicationSpec: V1alpha1ApplicationSpec,
    params?: ApplicationServiceUpdateSpecParams,
 ) => {
      return httpClient<V1alpha1ApplicationSpec>(
      {url: `/api/v1/applications/${name}/spec`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: v1alpha1ApplicationSpec,
        params
    },
      );
    }
  
/**
 * @summary Sync syncs an application to its target state
 */
export const applicationServiceSync = (
    name: string,
    applicationApplicationSyncRequest: ApplicationApplicationSyncRequest,
 ) => {
      return httpClient<V1alpha1Application>(
      {url: `/api/v1/applications/${name}/sync`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: applicationApplicationSyncRequest
    },
      );
    }
  
/**
 * @summary Get returns sync windows of the application
 */
export const applicationServiceGetApplicationSyncWindows = (
    name: string,
    params?: ApplicationServiceGetApplicationSyncWindowsParams,
 ) => {
      return httpClient<ApplicationApplicationSyncWindowsResponse>(
      {url: `/api/v1/applications/${name}/syncwindows`, method: 'GET',
        params
    },
      );
    }
  
/**
 * @summary List returns list of applicationset
 */
export const applicationSetServiceList = (
    params?: ApplicationSetServiceListParams,
 ) => {
      return httpClient<V1alpha1ApplicationSetList>(
      {url: `/api/v1/applicationsets`, method: 'GET',
        params
    },
      );
    }
  
/**
 * @summary Create creates an applicationset
 */
export const applicationSetServiceCreate = (
    v1alpha1ApplicationSet: V1alpha1ApplicationSet,
    params?: ApplicationSetServiceCreateParams,
 ) => {
      return httpClient<V1alpha1ApplicationSet>(
      {url: `/api/v1/applicationsets`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: v1alpha1ApplicationSet,
        params
    },
      );
    }
  
/**
 * @summary Get returns an applicationset by name
 */
export const applicationSetServiceGet = (
    name: string,
    params?: ApplicationSetServiceGetParams,
 ) => {
      return httpClient<V1alpha1ApplicationSet>(
      {url: `/api/v1/applicationsets/${name}`, method: 'GET',
        params
    },
      );
    }
  
/**
 * @summary Delete deletes an application set
 */
export const applicationSetServiceDelete = (
    name: string,
    params?: ApplicationSetServiceDeleteParams,
 ) => {
      return httpClient<ApplicationsetApplicationSetResponse>(
      {url: `/api/v1/applicationsets/${name}`, method: 'DELETE',
        params
    },
      );
    }
  
/**
 * @summary List all available repository certificates
 */
export const certificateServiceListCertificates = (
    params?: CertificateServiceListCertificatesParams,
 ) => {
      return httpClient<V1alpha1RepositoryCertificateList>(
      {url: `/api/v1/certificates`, method: 'GET',
        params
    },
      );
    }
  
/**
 * @summary Creates repository certificates on the server
 */
export const certificateServiceCreateCertificate = (
    v1alpha1RepositoryCertificateList: V1alpha1RepositoryCertificateList,
    params?: CertificateServiceCreateCertificateParams,
 ) => {
      return httpClient<V1alpha1RepositoryCertificateList>(
      {url: `/api/v1/certificates`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: v1alpha1RepositoryCertificateList,
        params
    },
      );
    }
  
/**
 * @summary Delete the certificates that match the RepositoryCertificateQuery
 */
export const certificateServiceDeleteCertificate = (
    params?: CertificateServiceDeleteCertificateParams,
 ) => {
      return httpClient<V1alpha1RepositoryCertificateList>(
      {url: `/api/v1/certificates`, method: 'DELETE',
        params
    },
      );
    }
  
/**
 * @summary List returns list of clusters
 */
export const clusterServiceList = (
    params?: ClusterServiceListParams,
 ) => {
      return httpClient<V1alpha1ClusterList>(
      {url: `/api/v1/clusters`, method: 'GET',
        params
    },
      );
    }
  
/**
 * @summary Create creates a cluster
 */
export const clusterServiceCreate = (
    v1alpha1ClusterBody: V1alpha1ClusterBody,
    params?: ClusterServiceCreateParams,
 ) => {
      return httpClient<V1alpha1Cluster>(
      {url: `/api/v1/clusters`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: v1alpha1ClusterBody,
        params
    },
      );
    }
  
/**
 * @summary Get returns a cluster by server address
 */
export const clusterServiceGet = (
    params?: ClusterServiceGetParams,
 ) => {
      return httpClient<V1alpha1Cluster>(
      {url: `/api/v1/clusters/id.value}`, method: 'GET',
        params
    },
      );
    }
  
/**
 * @summary Update updates a cluster
 */
export const clusterServiceUpdate = (
    v1alpha1ClusterBody: V1alpha1ClusterBody,
    params?: ClusterServiceUpdateParams,
 ) => {
      return httpClient<V1alpha1Cluster>(
      {url: `/api/v1/clusters/id.value}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: v1alpha1ClusterBody,
        params
    },
      );
    }
  
/**
 * @summary Delete deletes a cluster
 */
export const clusterServiceDelete = (
    params?: ClusterServiceDeleteParams,
 ) => {
      return httpClient<ClusterClusterResponse>(
      {url: `/api/v1/clusters/id.value}`, method: 'DELETE',
        params
    },
      );
    }
  
/**
 * @summary InvalidateCache invalidates cluster cache
 */
export const clusterServiceInvalidateCache = (
    
 ) => {
      return httpClient<V1alpha1Cluster>(
      {url: `/api/v1/clusters/id.value}/invalidate-cache`, method: 'POST'
    },
      );
    }
  
/**
 * @summary RotateAuth rotates the bearer token used for a cluster
 */
export const clusterServiceRotateAuth = (
    
 ) => {
      return httpClient<ClusterClusterResponse>(
      {url: `/api/v1/clusters/id.value}/rotate-auth`, method: 'POST'
    },
      );
    }
  
/**
 * @summary List all available repository certificates
 */
export const gPGKeyServiceList = (
    params?: GPGKeyServiceListParams,
 ) => {
      return httpClient<V1alpha1GnuPGPublicKeyList>(
      {url: `/api/v1/gpgkeys`, method: 'GET',
        params
    },
      );
    }
  
/**
 * @summary Create one or more GPG public keys in the server's configuration
 */
export const gPGKeyServiceCreate = (
    v1alpha1GnuPGPublicKey: V1alpha1GnuPGPublicKey,
    params?: GPGKeyServiceCreateParams,
 ) => {
      return httpClient<GpgkeyGnuPGPublicKeyCreateResponse>(
      {url: `/api/v1/gpgkeys`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: v1alpha1GnuPGPublicKey,
        params
    },
      );
    }
  
/**
 * @summary Delete specified GPG public key from the server's configuration
 */
export const gPGKeyServiceDelete = (
    params?: GPGKeyServiceDeleteParams,
 ) => {
      return httpClient<GpgkeyGnuPGPublicKeyResponse>(
      {url: `/api/v1/gpgkeys`, method: 'DELETE',
        params
    },
      );
    }
  
/**
 * @summary Get information about specified GPG public key from the server
 */
export const gPGKeyServiceGet = (
    keyID: string,
 ) => {
      return httpClient<V1alpha1GnuPGPublicKey>(
      {url: `/api/v1/gpgkeys/${keyID}`, method: 'GET'
    },
      );
    }
  
/**
 * @summary List returns list of services
 */
export const notificationServiceListServices = (
    
 ) => {
      return httpClient<NotificationServiceList>(
      {url: `/api/v1/notifications/services`, method: 'GET'
    },
      );
    }
  
/**
 * @summary List returns list of templates
 */
export const notificationServiceListTemplates = (
    
 ) => {
      return httpClient<NotificationTemplateList>(
      {url: `/api/v1/notifications/templates`, method: 'GET'
    },
      );
    }
  
/**
 * @summary List returns list of triggers
 */
export const notificationServiceListTriggers = (
    
 ) => {
      return httpClient<NotificationTriggerList>(
      {url: `/api/v1/notifications/triggers`, method: 'GET'
    },
      );
    }
  
/**
 * @summary List returns list of projects
 */
export const projectServiceList = (
    params?: ProjectServiceListParams,
 ) => {
      return httpClient<V1alpha1AppProjectList>(
      {url: `/api/v1/projects`, method: 'GET',
        params
    },
      );
    }
  
/**
 * @summary Create a new project
 */
export const projectServiceCreate = (
    projectProjectCreateRequest: ProjectProjectCreateRequest,
 ) => {
      return httpClient<V1alpha1AppProject>(
      {url: `/api/v1/projects`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: projectProjectCreateRequest
    },
      );
    }
  
/**
 * @summary Get returns a project by name
 */
export const projectServiceGet = (
    name: string,
 ) => {
      return httpClient<V1alpha1AppProject>(
      {url: `/api/v1/projects/${name}`, method: 'GET'
    },
      );
    }
  
/**
 * @summary Delete deletes a project
 */
export const projectServiceDelete = (
    name: string,
 ) => {
      return httpClient<ProjectEmptyResponse>(
      {url: `/api/v1/projects/${name}`, method: 'DELETE'
    },
      );
    }
  
/**
 * @summary GetDetailedProject returns a project that include project, global project and scoped resources by name
 */
export const projectServiceGetDetailedProject = (
    name: string,
 ) => {
      return httpClient<ProjectDetailedProjectsResponse>(
      {url: `/api/v1/projects/${name}/detailed`, method: 'GET'
    },
      );
    }
  
/**
 * @summary ListEvents returns a list of project events
 */
export const projectServiceListEvents = (
    name: string,
 ) => {
      return httpClient<V1EventList>(
      {url: `/api/v1/projects/${name}/events`, method: 'GET'
    },
      );
    }
  
/**
 * @summary Get returns a virtual project by name
 */
export const projectServiceGetGlobalProjects = (
    name: string,
 ) => {
      return httpClient<ProjectGlobalProjectsResponse>(
      {url: `/api/v1/projects/${name}/globalprojects`, method: 'GET'
    },
      );
    }
  
/**
 * @summary ListLinks returns all deep links for the particular project
 */
export const projectServiceListLinks = (
    name: string,
 ) => {
      return httpClient<ApplicationLinksResponse>(
      {url: `/api/v1/projects/${name}/links`, method: 'GET'
    },
      );
    }
  
/**
 * @summary GetSchedulesState returns true if there are any active sync syncWindows
 */
export const projectServiceGetSyncWindowsState = (
    name: string,
 ) => {
      return httpClient<ProjectSyncWindowsResponse>(
      {url: `/api/v1/projects/${name}/syncwindows`, method: 'GET'
    },
      );
    }
  
/**
 * @summary Update updates a project
 */
export const projectServiceUpdate = (
    projectProjectUpdateRequest: ProjectProjectUpdateRequest,
 ) => {
      return httpClient<V1alpha1AppProject>(
      {url: `/api/v1/projects/project.metadata.name}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: projectProjectUpdateRequest
    },
      );
    }
  
/**
 * @summary Create a new project token
 */
export const projectServiceCreateToken = (
    project: string,
    role: string,
    projectProjectTokenCreateRequest: ProjectProjectTokenCreateRequest,
 ) => {
      return httpClient<ProjectProjectTokenResponse>(
      {url: `/api/v1/projects/${project}/roles/${role}/token`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: projectProjectTokenCreateRequest
    },
      );
    }
  
/**
 * @summary Delete a new project token
 */
export const projectServiceDeleteToken = (
    project: string,
    role: string,
    iat: string,
    params?: ProjectServiceDeleteTokenParams,
 ) => {
      return httpClient<ProjectEmptyResponse>(
      {url: `/api/v1/projects/${project}/roles/${role}/token/${iat}`, method: 'DELETE',
        params
    },
      );
    }
  
/**
 * @summary ListRepositoryCredentials gets a list of all configured repository credential sets
 */
export const repoCredsServiceListRepositoryCredentials = (
    params?: RepoCredsServiceListRepositoryCredentialsParams,
 ) => {
      return httpClient<V1alpha1RepoCredsList>(
      {url: `/api/v1/repocreds`, method: 'GET',
        params
    },
      );
    }
  
/**
 * @summary CreateRepositoryCredentials creates a new repository credential set
 */
export const repoCredsServiceCreateRepositoryCredentials = (
    v1alpha1RepoCreds: V1alpha1RepoCreds,
    params?: RepoCredsServiceCreateRepositoryCredentialsParams,
 ) => {
      return httpClient<V1alpha1RepoCreds>(
      {url: `/api/v1/repocreds`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: v1alpha1RepoCreds,
        params
    },
      );
    }
  
/**
 * @summary UpdateRepositoryCredentials updates a repository credential set
 */
export const repoCredsServiceUpdateRepositoryCredentials = (
    v1alpha1RepoCreds: V1alpha1RepoCreds,
 ) => {
      return httpClient<V1alpha1RepoCreds>(
      {url: `/api/v1/repocreds/creds.url}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: v1alpha1RepoCreds
    },
      );
    }
  
/**
 * @summary DeleteRepositoryCredentials deletes a repository credential set from the configuration
 */
export const repoCredsServiceDeleteRepositoryCredentials = (
    url: string,
 ) => {
      return httpClient<RepocredsRepoCredsResponse>(
      {url: `/api/v1/repocreds/${url}`, method: 'DELETE'
    },
      );
    }
  
/**
 * @summary ListRepositories gets a list of all configured repositories
 */
export const repositoryServiceListRepositories = (
    params?: RepositoryServiceListRepositoriesParams,
 ) => {
      return httpClient<V1alpha1RepositoryList>(
      {url: `/api/v1/repositories`, method: 'GET',
        params
    },
      );
    }
  
/**
 * @summary CreateRepository creates a new repository configuration
 */
export const repositoryServiceCreateRepository = (
    v1alpha1Repository: V1alpha1Repository,
    params?: RepositoryServiceCreateRepositoryParams,
 ) => {
      return httpClient<V1alpha1Repository>(
      {url: `/api/v1/repositories`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: v1alpha1Repository,
        params
    },
      );
    }
  
/**
 * @summary UpdateRepository updates a repository configuration
 */
export const repositoryServiceUpdateRepository = (
    v1alpha1Repository: V1alpha1Repository,
 ) => {
      return httpClient<V1alpha1Repository>(
      {url: `/api/v1/repositories/repo.repo}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: v1alpha1Repository
    },
      );
    }
  
/**
 * @summary Get returns a repository or its credentials
 */
export const repositoryServiceGet = (
    repo: string,
    params?: RepositoryServiceGetParams,
 ) => {
      return httpClient<V1alpha1Repository>(
      {url: `/api/v1/repositories/${repo}`, method: 'GET',
        params
    },
      );
    }
  
/**
 * @summary DeleteRepository deletes a repository from the configuration
 */
export const repositoryServiceDeleteRepository = (
    repo: string,
    params?: RepositoryServiceDeleteRepositoryParams,
 ) => {
      return httpClient<RepositoryRepoResponse>(
      {url: `/api/v1/repositories/${repo}`, method: 'DELETE',
        params
    },
      );
    }
  
/**
 * @summary ListApps returns list of apps in the repo
 */
export const repositoryServiceListApps = (
    repo: string,
    params?: RepositoryServiceListAppsParams,
 ) => {
      return httpClient<RepositoryRepoAppsResponse>(
      {url: `/api/v1/repositories/${repo}/apps`, method: 'GET',
        params
    },
      );
    }
  
/**
 * @summary GetHelmCharts returns list of helm charts in the specified repository
 */
export const repositoryServiceGetHelmCharts = (
    repo: string,
    params?: RepositoryServiceGetHelmChartsParams,
 ) => {
      return httpClient<RepositoryHelmChartsResponse>(
      {url: `/api/v1/repositories/${repo}/helmcharts`, method: 'GET',
        params
    },
      );
    }
  
export const repositoryServiceListRefs = (
    repo: string,
    params?: RepositoryServiceListRefsParams,
 ) => {
      return httpClient<RepositoryRefs>(
      {url: `/api/v1/repositories/${repo}/refs`, method: 'GET',
        params
    },
      );
    }
  
/**
 * @summary ValidateAccess validates access to a repository with given parameters
 */
export const repositoryServiceValidateAccess = (
    repo: string,
    repositoryServiceValidateAccessBody: string,
    params?: RepositoryServiceValidateAccessParams,
 ) => {
      return httpClient<RepositoryRepoResponse>(
      {url: `/api/v1/repositories/${repo}/validate`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: repositoryServiceValidateAccessBody,
        params
    },
      );
    }
  
/**
 * @summary GetAppDetails returns application details by given path
 */
export const repositoryServiceGetAppDetails = (
    repositoryRepoAppDetailsQuery: RepositoryRepoAppDetailsQuery,
 ) => {
      return httpClient<RepositoryRepoAppDetailsResponse>(
      {url: `/api/v1/repositories/source.repoURL}/appdetails`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: repositoryRepoAppDetailsQuery
    },
      );
    }
  
/**
 * @summary Create a new JWT for authentication and set a cookie if using HTTP
 */
export const sessionServiceCreate = (
    sessionSessionCreateRequest: SessionSessionCreateRequest,
 ) => {
      return httpClient<SessionSessionResponse>(
      {url: `/api/v1/session`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: sessionSessionCreateRequest
    },
      );
    }
  
/**
 * @summary Delete an existing JWT cookie if using HTTP
 */
export const sessionServiceDelete = (
    
 ) => {
      return httpClient<SessionSessionResponse>(
      {url: `/api/v1/session`, method: 'DELETE'
    },
      );
    }
  
/**
 * @summary Get the current user's info
 */
export const sessionServiceGetUserInfo = (
    
 ) => {
      return httpClient<SessionGetUserInfoResponse>(
      {url: `/api/v1/session/userinfo`, method: 'GET'
    },
      );
    }
  
/**
 * @summary Get returns Argo CD settings
 */
export const settingsServiceGet = (
    
 ) => {
      return httpClient<ClusterSettings>(
      {url: `/api/v1/settings`, method: 'GET'
    },
      );
    }
  
/**
 * @summary Get returns Argo CD plugins
 */
export const settingsServiceGetPlugins = (
    
 ) => {
      return httpClient<ClusterSettingsPluginsResponse>(
      {url: `/api/v1/settings/plugins`, method: 'GET'
    },
      );
    }
  
/**
 * @summary Watch returns stream of application change events
 */
export const applicationServiceWatch = (
    params?: ApplicationServiceWatchParams,
 ) => {
      return httpClient<ApplicationServiceWatch200>(
      {url: `/api/v1/stream/applications`, method: 'GET',
        params
    },
      );
    }
  
/**
 * @summary Watch returns stream of application resource tree
 */
export const applicationServiceWatchResourceTree = (
    applicationName: string,
    params?: ApplicationServiceWatchResourceTreeParams,
 ) => {
      return httpClient<ApplicationServiceWatchResourceTree200>(
      {url: `/api/v1/stream/applications/${applicationName}/resource-tree`, method: 'GET',
        params
    },
      );
    }
  
/**
 * @summary Version returns version information of the API server
 */
export const versionServiceVersion = (
    
 ) => {
      return httpClient<VersionVersionMessage>(
      {url: `/api/version`, method: 'GET'
    },
      );
    }
  
export type AccountServiceListAccountsResult = NonNullable<Awaited<ReturnType<typeof accountServiceListAccounts>>>
export type AccountServiceCanIResult = NonNullable<Awaited<ReturnType<typeof accountServiceCanI>>>
export type AccountServiceUpdatePasswordResult = NonNullable<Awaited<ReturnType<typeof accountServiceUpdatePassword>>>
export type AccountServiceGetAccountResult = NonNullable<Awaited<ReturnType<typeof accountServiceGetAccount>>>
export type AccountServiceCreateTokenResult = NonNullable<Awaited<ReturnType<typeof accountServiceCreateToken>>>
export type AccountServiceDeleteTokenResult = NonNullable<Awaited<ReturnType<typeof accountServiceDeleteToken>>>
export type ApplicationServiceListResult = NonNullable<Awaited<ReturnType<typeof applicationServiceList>>>
export type ApplicationServiceCreateResult = NonNullable<Awaited<ReturnType<typeof applicationServiceCreate>>>
export type ApplicationServiceGetManifestsWithFilesResult = NonNullable<Awaited<ReturnType<typeof applicationServiceGetManifestsWithFiles>>>
export type ApplicationServiceUpdateResult = NonNullable<Awaited<ReturnType<typeof applicationServiceUpdate>>>
export type ApplicationServiceManagedResourcesResult = NonNullable<Awaited<ReturnType<typeof applicationServiceManagedResources>>>
export type ApplicationServiceResourceTreeResult = NonNullable<Awaited<ReturnType<typeof applicationServiceResourceTree>>>
export type ApplicationServiceGetResult = NonNullable<Awaited<ReturnType<typeof applicationServiceGet>>>
export type ApplicationServiceDeleteResult = NonNullable<Awaited<ReturnType<typeof applicationServiceDelete>>>
export type ApplicationServicePatchResult = NonNullable<Awaited<ReturnType<typeof applicationServicePatch>>>
export type ApplicationServiceListResourceEventsResult = NonNullable<Awaited<ReturnType<typeof applicationServiceListResourceEvents>>>
export type ApplicationServiceListLinksResult = NonNullable<Awaited<ReturnType<typeof applicationServiceListLinks>>>
export type ApplicationServicePodLogs2Result = NonNullable<Awaited<ReturnType<typeof applicationServicePodLogs2>>>
export type ApplicationServiceGetManifestsResult = NonNullable<Awaited<ReturnType<typeof applicationServiceGetManifests>>>
export type ApplicationServiceTerminateOperationResult = NonNullable<Awaited<ReturnType<typeof applicationServiceTerminateOperation>>>
export type ApplicationServicePodLogsResult = NonNullable<Awaited<ReturnType<typeof applicationServicePodLogs>>>
export type ApplicationServiceGetResourceResult = NonNullable<Awaited<ReturnType<typeof applicationServiceGetResource>>>
export type ApplicationServicePatchResourceResult = NonNullable<Awaited<ReturnType<typeof applicationServicePatchResource>>>
export type ApplicationServiceDeleteResourceResult = NonNullable<Awaited<ReturnType<typeof applicationServiceDeleteResource>>>
export type ApplicationServiceListResourceActionsResult = NonNullable<Awaited<ReturnType<typeof applicationServiceListResourceActions>>>
export type ApplicationServiceRunResourceActionResult = NonNullable<Awaited<ReturnType<typeof applicationServiceRunResourceAction>>>
export type ApplicationServiceListResourceLinksResult = NonNullable<Awaited<ReturnType<typeof applicationServiceListResourceLinks>>>
export type ApplicationServiceRevisionChartDetailsResult = NonNullable<Awaited<ReturnType<typeof applicationServiceRevisionChartDetails>>>
export type ApplicationServiceRevisionMetadataResult = NonNullable<Awaited<ReturnType<typeof applicationServiceRevisionMetadata>>>
export type ApplicationServiceRollbackResult = NonNullable<Awaited<ReturnType<typeof applicationServiceRollback>>>
export type ApplicationServiceUpdateSpecResult = NonNullable<Awaited<ReturnType<typeof applicationServiceUpdateSpec>>>
export type ApplicationServiceSyncResult = NonNullable<Awaited<ReturnType<typeof applicationServiceSync>>>
export type ApplicationServiceGetApplicationSyncWindowsResult = NonNullable<Awaited<ReturnType<typeof applicationServiceGetApplicationSyncWindows>>>
export type ApplicationSetServiceListResult = NonNullable<Awaited<ReturnType<typeof applicationSetServiceList>>>
export type ApplicationSetServiceCreateResult = NonNullable<Awaited<ReturnType<typeof applicationSetServiceCreate>>>
export type ApplicationSetServiceGetResult = NonNullable<Awaited<ReturnType<typeof applicationSetServiceGet>>>
export type ApplicationSetServiceDeleteResult = NonNullable<Awaited<ReturnType<typeof applicationSetServiceDelete>>>
export type CertificateServiceListCertificatesResult = NonNullable<Awaited<ReturnType<typeof certificateServiceListCertificates>>>
export type CertificateServiceCreateCertificateResult = NonNullable<Awaited<ReturnType<typeof certificateServiceCreateCertificate>>>
export type CertificateServiceDeleteCertificateResult = NonNullable<Awaited<ReturnType<typeof certificateServiceDeleteCertificate>>>
export type ClusterServiceListResult = NonNullable<Awaited<ReturnType<typeof clusterServiceList>>>
export type ClusterServiceCreateResult = NonNullable<Awaited<ReturnType<typeof clusterServiceCreate>>>
export type ClusterServiceGetResult = NonNullable<Awaited<ReturnType<typeof clusterServiceGet>>>
export type ClusterServiceUpdateResult = NonNullable<Awaited<ReturnType<typeof clusterServiceUpdate>>>
export type ClusterServiceDeleteResult = NonNullable<Awaited<ReturnType<typeof clusterServiceDelete>>>
export type ClusterServiceInvalidateCacheResult = NonNullable<Awaited<ReturnType<typeof clusterServiceInvalidateCache>>>
export type ClusterServiceRotateAuthResult = NonNullable<Awaited<ReturnType<typeof clusterServiceRotateAuth>>>
export type GPGKeyServiceListResult = NonNullable<Awaited<ReturnType<typeof gPGKeyServiceList>>>
export type GPGKeyServiceCreateResult = NonNullable<Awaited<ReturnType<typeof gPGKeyServiceCreate>>>
export type GPGKeyServiceDeleteResult = NonNullable<Awaited<ReturnType<typeof gPGKeyServiceDelete>>>
export type GPGKeyServiceGetResult = NonNullable<Awaited<ReturnType<typeof gPGKeyServiceGet>>>
export type NotificationServiceListServicesResult = NonNullable<Awaited<ReturnType<typeof notificationServiceListServices>>>
export type NotificationServiceListTemplatesResult = NonNullable<Awaited<ReturnType<typeof notificationServiceListTemplates>>>
export type NotificationServiceListTriggersResult = NonNullable<Awaited<ReturnType<typeof notificationServiceListTriggers>>>
export type ProjectServiceListResult = NonNullable<Awaited<ReturnType<typeof projectServiceList>>>
export type ProjectServiceCreateResult = NonNullable<Awaited<ReturnType<typeof projectServiceCreate>>>
export type ProjectServiceGetResult = NonNullable<Awaited<ReturnType<typeof projectServiceGet>>>
export type ProjectServiceDeleteResult = NonNullable<Awaited<ReturnType<typeof projectServiceDelete>>>
export type ProjectServiceGetDetailedProjectResult = NonNullable<Awaited<ReturnType<typeof projectServiceGetDetailedProject>>>
export type ProjectServiceListEventsResult = NonNullable<Awaited<ReturnType<typeof projectServiceListEvents>>>
export type ProjectServiceGetGlobalProjectsResult = NonNullable<Awaited<ReturnType<typeof projectServiceGetGlobalProjects>>>
export type ProjectServiceListLinksResult = NonNullable<Awaited<ReturnType<typeof projectServiceListLinks>>>
export type ProjectServiceGetSyncWindowsStateResult = NonNullable<Awaited<ReturnType<typeof projectServiceGetSyncWindowsState>>>
export type ProjectServiceUpdateResult = NonNullable<Awaited<ReturnType<typeof projectServiceUpdate>>>
export type ProjectServiceCreateTokenResult = NonNullable<Awaited<ReturnType<typeof projectServiceCreateToken>>>
export type ProjectServiceDeleteTokenResult = NonNullable<Awaited<ReturnType<typeof projectServiceDeleteToken>>>
export type RepoCredsServiceListRepositoryCredentialsResult = NonNullable<Awaited<ReturnType<typeof repoCredsServiceListRepositoryCredentials>>>
export type RepoCredsServiceCreateRepositoryCredentialsResult = NonNullable<Awaited<ReturnType<typeof repoCredsServiceCreateRepositoryCredentials>>>
export type RepoCredsServiceUpdateRepositoryCredentialsResult = NonNullable<Awaited<ReturnType<typeof repoCredsServiceUpdateRepositoryCredentials>>>
export type RepoCredsServiceDeleteRepositoryCredentialsResult = NonNullable<Awaited<ReturnType<typeof repoCredsServiceDeleteRepositoryCredentials>>>
export type RepositoryServiceListRepositoriesResult = NonNullable<Awaited<ReturnType<typeof repositoryServiceListRepositories>>>
export type RepositoryServiceCreateRepositoryResult = NonNullable<Awaited<ReturnType<typeof repositoryServiceCreateRepository>>>
export type RepositoryServiceUpdateRepositoryResult = NonNullable<Awaited<ReturnType<typeof repositoryServiceUpdateRepository>>>
export type RepositoryServiceGetResult = NonNullable<Awaited<ReturnType<typeof repositoryServiceGet>>>
export type RepositoryServiceDeleteRepositoryResult = NonNullable<Awaited<ReturnType<typeof repositoryServiceDeleteRepository>>>
export type RepositoryServiceListAppsResult = NonNullable<Awaited<ReturnType<typeof repositoryServiceListApps>>>
export type RepositoryServiceGetHelmChartsResult = NonNullable<Awaited<ReturnType<typeof repositoryServiceGetHelmCharts>>>
export type RepositoryServiceListRefsResult = NonNullable<Awaited<ReturnType<typeof repositoryServiceListRefs>>>
export type RepositoryServiceValidateAccessResult = NonNullable<Awaited<ReturnType<typeof repositoryServiceValidateAccess>>>
export type RepositoryServiceGetAppDetailsResult = NonNullable<Awaited<ReturnType<typeof repositoryServiceGetAppDetails>>>
export type SessionServiceCreateResult = NonNullable<Awaited<ReturnType<typeof sessionServiceCreate>>>
export type SessionServiceDeleteResult = NonNullable<Awaited<ReturnType<typeof sessionServiceDelete>>>
export type SessionServiceGetUserInfoResult = NonNullable<Awaited<ReturnType<typeof sessionServiceGetUserInfo>>>
export type SettingsServiceGetResult = NonNullable<Awaited<ReturnType<typeof settingsServiceGet>>>
export type SettingsServiceGetPluginsResult = NonNullable<Awaited<ReturnType<typeof settingsServiceGetPlugins>>>
export type ApplicationServiceWatchResult = NonNullable<Awaited<ReturnType<typeof applicationServiceWatch>>>
export type ApplicationServiceWatchResourceTreeResult = NonNullable<Awaited<ReturnType<typeof applicationServiceWatchResourceTree>>>
export type VersionServiceVersionResult = NonNullable<Awaited<ReturnType<typeof versionServiceVersion>>>
